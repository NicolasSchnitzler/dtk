// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "%1.h"
#include "%1Plugin.h"

#include <dtkCore/dtkPlugin_p.h>

#include <dtkLog/dtkLog.h>

// /////////////////////////////////////////////////////////////////
// %1PluginPrivate
// /////////////////////////////////////////////////////////////////

class %1PluginPrivate : public dtkPluginPrivate
{
public:
    %1PluginPrivate(%1Plugin *q = 0) : dtkPluginPrivate(q) {}
    %1PluginPrivate(const %1PluginPrivate& other) : dtkPluginPrivate(other) {} // Complete copy ctror with your local members.

public:
    ~%1PluginPrivate(void) {}
    
public:
    // Class variables go here.
};

// /////////////////////////////////////////////////////////////////
// %1Plugin
// /////////////////////////////////////////////////////////////////

%1Plugin::%1Plugin(QObject *parent) : dtkPlugin(*new %1PluginPrivate, parent)
{

}

%1Plugin::%1Plugin(const %1Plugin& other) : dtkPlugin(*new %1PluginPrivate(*other.d_func()), other)
{
    
}

%1Plugin::~%1Plugin(void)
{

}

bool %1Plugin::initialize(void)
{
    if(!%1::registered())
	dtkWarn() << "Unable to register %1 type";

    return true;
}

bool %1Plugin::uninitialize(void)
{
    return true;
}

QString %1Plugin::name(void) const
{
    return "%1Plugin";
}

QString %1Plugin::description(void) const
{
    return "";
}

QStringList %1Plugin::tags(void) const
{
    return QStringList();
}

QStringList %1Plugin::types(void) const
{
    return QStringList() << "%1";
}

Q_EXPORT_PLUGIN2(%1Plugin, %1Plugin)
