/* dtkPluginGeneratorPluginSourceFile.cpp --- 
 * 
 * Author: Julien Wintz
 * Copyright (C) 2008 - Julien Wintz, Inria.
 * Created: Wed Mar 11 14:27:57 2009 (+0100)
 * Version: $Id$
 * Last-Updated: Mon Sep 21 14:54:06 2009 (+0200)
 *           By: Julien Wintz
 *     Update #: 19
 */

/* Commentary: 
 * 
 */

/* Change log:
 * 
 */

#include "dtkPluginGenerator.h"

bool dtkPluginGenerator::generatePluginSourceFile(void)
{
    QFile pluginSourceFile(d->target.absoluteFilePath(QString(d->plugin).append("Plugin.cpp")));

    if(!pluginSourceFile.open(QIODevice::WriteOnly | QIODevice::Text)) {
	qWarning() << "dtkPluginGenerator: unable to open" << QString(d->plugin).append("Plugin.cpp") << "for writing";
	return false;
    }

    QTextStream stream(&pluginSourceFile);

    stream << QString(
        "// /////////////////////////////////////////////////////////////////\n"
        "// Generated by dtkPluginGenerator\n"
        "// /////////////////////////////////////////////////////////////////\n"
        "\n"
        "#include \"%1.h\"\n"
        "#include \"%1Plugin.h\"\n"
        "\n"
        "#include <dtkCore/dtkLog.h>\n"
        "\n"
        "// /////////////////////////////////////////////////////////////////\n"
        "// %1PluginPrivate\n"
        "// /////////////////////////////////////////////////////////////////\n"
        "\n"
        "class %1PluginPrivate \n"
        "{\n"
        "public:\n"
        "    // Class variables go here.\n"
        "};\n"
        "\n"
        "// /////////////////////////////////////////////////////////////////\n"
        "// %1Plugin\n"
        "// /////////////////////////////////////////////////////////////////\n"
        "\n"
        "%1Plugin::%1Plugin(QObject *parent) : dtkPlugin(parent), d(new %1PluginPrivate)\n"
        "{\n"
        "\n"
        "}\n"
        "\n"
        "%1Plugin::~%1Plugin(void)\n"
        "{\n"
        "    delete d;\n"
        "\n"
        "    d = NULL;\n"
        "}\n"
        "\n"
        "bool %1Plugin::initialize(void)\n"
        "{\n"
        "    if(!%1::registered())\n"
        "	dtkWarning() << \"Unable to register %1 type\";\n"
        "\n"
        "    return true;\n"
        "}\n"
        "\n"
        "bool %1Plugin::uninitialize(void)\n"
        "{\n"
        "    return true;\n"
        "}\n"
        "\n"
        "QString %1Plugin::name(void) const\n"
        "{\n"
        "    return \"%1Plugin\";\n"
        "}\n"
        "\n"
        "QString %1Plugin::description(void) const\n"
        "{\n"
        "    return \"\";\n"
        "}\n"
        "\n"
        "QStringList %1Plugin::tags(void) const\n"
        "{\n"
        "    return QStringList();\n"
        "}\n"
        "\n"
        "QStringList %1Plugin::types(void) const\n"
        "{\n"
        "    return QStringList() << \"%1\";\n"
        "}\n"
        "\n"
        "Q_EXPORT_PLUGIN2(%1Plugin, %1Plugin)\n"
	)
	.arg(QString(d->plugin));

    pluginSourceFile.close();

    return true;
}
