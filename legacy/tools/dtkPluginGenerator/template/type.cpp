// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "%1.h"

#include <dtkCore/dtkAbstract%2Factory.h>
#include <dtkCore/dtkAbstract%2_p.h>

// /////////////////////////////////////////////////////////////////
// %1Private interface
// /////////////////////////////////////////////////////////////////

class %1Private : public dtkAbstract%2Private
{
public:
    %1Private(%1 *q = 0) : dtkAbstract%2Private(q) {}
    %1Private(const %1Private& other) : dtkAbstract%2Private(other) {} // Complete copy ctror with your local members.

public:
    ~%1Private(void) {}

public:
    // private members are put here, eg
    // int index;
};

////////////////////////////////////////////////////
// %1 protected constructors
////////////////////////////////////////////////////

DTK_IMPLEMENT_PRIVATE(%1, dtkAbstract%2);

// /////////////////////////////////////////////////////////////////
// %1 implementation
// /////////////////////////////////////////////////////////////////

%1::%1(void) : dtkAbstract%2(*new %1Private(this), 0)
{

}

%1::%1(const %1& other) : dtkAbstract%2(*new %1Private(*other.d_func()), other)
{

}

%1::~%1(void)
{

}

%1& %1::operator = (const %1& other)
{
    dtkAbstract%2::operator=(other);

    // Complete here with respect to your local d-pointer as follows:
    //
    // DTK_D(%1);
    //
    // d->index = other.d_func()->index;

    return *this;
}

bool %1::registered(void)
{
    return dtkAbstract%2Factory::instance()->register%2Type("%1", create%3, "dtkAbstract%2");
}

QString %1::description(void) const
{
    return "%1";
}

QString %1::identifier(void) const
{
    return "%1";
}

// /////////////////////////////////////////////////////////////////
// Type instantiation
// /////////////////////////////////////////////////////////////////

dtkAbstract%2 *create%3(void)
{
    return new %1;
}
